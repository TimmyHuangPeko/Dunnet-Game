The first part of the new homework is to write a script, argprep, that checks
the arguments of various sed commands (i, l, x, drop, get, eat, climb, & put).
This file tests argprep with some sample inputs. I've also provided a sample
output that you can compare to what you get from running this testarg script.

The argprep file checks several things:
 - Whether the command is legal.
 - Whether the object is legal.
 - If the object is in the current directory.

With the above checks, some error messages are generated. But some other error
messages cannot be generated with the checks just described. For example, the
drop command requires that the given object be in the inventory directory --
but the above checks don't look in that directory.

We begin our tests in the starting directory:
cd ~/dunnet2020/start

And we begin by testing the eat and drop commands, since their implementations
don't need to check if the object is in the current location:
eat lamp........e lamp
eat palms.......e tree
eat emerald.....e bracelet
eat cpu.........e board
eat vax.........e vax
eat computer....e computer
eat x...........I do not know what that is.
eat.............You must supply an object.
drop lamp.......d lamp
drop palms......d tree
drop emerald....d bracelet
drop cpu........d board
drop vax........d vax
drop computer...d computer
drop x..........I do not know what that is.
drop............You must supply an object.
throw lamp xyz..d lamp
drpo shovel.....I don't understand that

Notice, in the above output, that:
 - The drop command became just a 'd'.
 - Throw is synonym for drop.
 - Some objects, like palms and emerald were replaced by their synonyms.
 - Other objects, like vax and computer, aren't replaced even though they have
   synonyms. (The reason these aren't replaced is because you don't need to
   climb or get those objects, so it isn't necessary to simplify them.)
 - Things like the tree cannot be picked up, so it can't be dropped -- but it
   didn't give an error. That's because we didn't look in the inventory (yet).
 - Other types of errors that can be detected without looking in the inventory
   are directly displayed.


Now we try 'i', because it is very simple. Since the 'i' command doesn't use
arguments, they are ignored and don't cause errors:
i shovel........i
i xyz...........i
i...............i

Now we look at the commands x, get, eat, climb, and shake. These commands do
care about whether the object is in this location. For get and climb, the
object must be in this location. For x and shake, the object CAN be in this
location, or it can be in the inventory. This means that we can't create an
error message for x and shake -- but we still want to know if the object is
present. We will indicate this by adding a "@" at the end.

get shovel......g shovel
get lamp........I do not see that here.
get palms.......g tree
get emerald.....I do not see that here.
get.............You must supply an object.
climb shovel....c shovel
climb lamp......I do not see that here.
climb palms.....c tree
climb emerald...I do not see that here.
climb...........c tree
shake shovel....s shovel
shake lamp......s lamp @
shake palms.....s tree
shake emerald...s bracelet @
shake...........You must supply an object.
x shovel........x shovel
x lamp..........x lamp @
x palms.........x tree
x emerald.......x bracelet @
x...............l
l shovel xyz....x shovel

Notice:
 - The behavior of x: it is actually a synonym of l. A "l shovel" is the same
   as a "x shovel" and an "x" with no arguments is the same as an "l".
 - The behavior of climb with no arguments. It becomes "c tree" (the tree is
   assumed, just like in the actual game).
 - The behavior on the objects that aren't present, the lamp and bracelet.
   These give errors for get and climb, but they get @ symbols for shake and
   x. (In fact code we'll implement later will find that the lamp is not an
   error, because it is in the inventory.)


The next thing demonstrate is going to a different location. We'll go to where
the emerald bracelet is:

cd ~/dunnet2020/start/e/e/se/se/sw
get palms.......I do not see that here.
get emerald.....g bracelet
get.............You must supply an object.
climb palms.....I do not see that here.
climb emerald...c bracelet
climb...........There is nothing here to climb.
shake palms.....s tree @
shake emerald...s bracelet
shake...........You must supply an object.
x palms.........x tree @
x emerald.......x bracelet
x...............l

Notice:
 - The behavior of climb with no arguments. It gives an error message that
   does not mention the tree.
 - The behavior of the emerald: now it doesn't give an error message or a "@".
 - The behavior of the tree: now it does give an error message or a "@".


Next, we'll look into the put command:
put...........................You must supply an object.
put xyz emerald bracelet......I do not know what that is.
put shovel in emerald.........p shovel in bracelet
put emerald in shovel.........p bracelet in shovel @
put emerald in emerald junk...p bracelet in bracelet
put emerald in emerald........p bracelet in bracelet
put emerald in junk...........I do not know what that indirect object is.
put emerald in................You must supply an indirect object.
put emerald emerald junk......I do not know what that indirect object is.
put emerald emerald...........You must supply an indirect object.
put emerald junk..............You must supply an indirect object.
put emerald...................You must supply an indirect object.

Notice:
 - The behavior of put is that the object you are putting must be in your
   inventory (like drop requires), but the object you are trying to put into
   can be in either your inventory or this location (like shake requires).
 - The first argument is treated like drop treats it: there is no error if it
   isn't in this location, nor is a "@" added.
 - The second argument is ignored.
 - The third argument is treated like shake treats its (only) argument: a "@"
   is added.
 - Any additional arguments are ignored.


Other things will also be tested, such as having extra spaces or using
unrecognized keywords:
   get    bracelet   .........g bracelet
g bracelet....................I don't understand that
So that concludes the test program. See the README.pa4 file for a discussion
of the implementing of argprep.
